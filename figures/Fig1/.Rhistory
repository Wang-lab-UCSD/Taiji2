p <- get_heatmap(Data_normed_3[housekeeping,], cluster_rows=F, size = 5)
# write to file
pdf(paste0('hp_',length(housekeeping),'_non_specific_TFs.pdf'))
print(p)
dev.off()
# load meta file
group_sorted <- read.table('group_file_v2.txt',header = T, row.names = 1)
group_sorted$oldName <- rownames(group_sorted)
rownames(group_sorted) <- group_sorted$newName
n <- which(group_sorted[["Group"]]=="TexTerm")
# identification
tfs <- lapply(unique(group_sorted$Group),
function(x) {
pr <- Data[!(row.names(Data) %in% housekeeping),]
n <- which(group_sorted[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
rownames(x)
})
names(tfs) <- unique(group_sorted$Group)
ps <- lapply(names(tfs), function(x) {
annotation_row <- data.frame("subsets"=rep(x,length(tfs[[x]])))
rownames(annotation_row) <- tfs[[x]]
p <-get_heatmap(df=Data_normed_3[rownames(annotation_row),], cluster_rows=F, annotation_row=annotation_row, size = 5)
pdf(paste0('hp_',nrow(annotation_row),'_',x,'_TFs.pdf'))
print(p)
dev.off()
})
getRowAnnotation <- function(TFs){
tmp <- unlist(TFs)
redundants <- unname(tmp[duplicated(tmp)])
uniques <- unname(tmp[!duplicated(tmp)])
tmp2 <- tibble("subsets" = "multi","TFs"=unique(redundants))
annotation_row <- tibble("subsets" = unlist(lapply(1:length(TFs), function(x) {rep(names(TFs[x]), length(TFs[[x]]))})),
"TFs" = unlist(TFs)) %>%
filter(TFs %in% setdiff(uniques, redundants)) %>%
bind_rows(tmp2) %>%
tibble::column_to_rownames("TFs")
return(annotation_row)
}
annotation_row <- getRowAnnotation(tfs)
breaksList = seq(-2, 2, by = 0.1)
annotation_row %>% filter(subsets=="multi") %>% rownames() %>% writeLines('multi_TFs.txt')
annotation_row %>% filter(subsets!="multi") %>% rownames() %>% writeLines('single_TFs.txt')
df_multi <- Data_normed_3[readLines('multi_TFs.txt'),]
p1 <- get_heatmap(df_multi, size=5)
## write to file
pdf(paste0('hp_',nrow(df_multi),'_multi_TFs.pdf'))
print(p1)
dev.off()
df_multi <- Data_normed_3[readLines('multi_TFs.txt'),]
p1 <- get_heatmap(df_multi, size=5)
## write to file
pdf(paste0('hp_',nrow(df_multi),'_multi_TFs.pdf'), height=12)
print(p1)
dev.off()
df_multi <- Data_normed_3[readLines('multi_TFs.txt'),]
p1 <- get_heatmap(df_multi, size=5)
## write to file
pdf(paste0('hp_',nrow(df_multi),'_multi_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
df_sgl <- Data_normed_3[readLines('single_TFs.txt'),]
p1 <- get_heatmap(df_sgl, size=5)
## write to file
pdf(paste0('hp_',nrow(df_sgl),'_single_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
View(Data)
names(Dataq)
names(Data)
View(df_sgl)
View(annotation_row)
rownames(df_sgl)
aggregate(annotation_row$subsets, by=list(annotation_row$subsets), FUN=tail, n=1)
aggregate(rownames(annotation_row), by=list(annotation_row$subsets), FUN=tail, n=1)
which('Gata2', rownames(df_sgl))
which('Gata2' %in% rownames(df_sgl))
View(df_sgl)
which('Gata2' == rownames(df_sgl))
which('Thrb' == rownames(df_sgl))
View(df_sgl)
aggregate(rownames(annotation_row), by=list(annotation_row$subsets), FUN=tail, n=1) |> pull(x)
last_elememts <- aggregate(rownames(annotation_row), by=list(annotation_row$subsets), FUN=tail, n=1) |> pull(x)
lapply(last_elememts, function(x) which(x==rownames(df_sgl)))
unlist(lapply(last_elememts, function(x) which(x==rownames(df_sgl))))
sort(unlist(lapply(last_elememts, function(x) which(x==rownames(df_sgl)))))
df_sgl <- Data_normed_3[readLines('single_TFs.txt'),]
# add gap between cell state groups
last_element_per_group <- aggregate(rownames(annotation_row), by=list(annotation_row$subsets), FUN=tail, n=1) |> pull(x)
gaps <- sort(unlist(lapply(last_element_per_group, function(x) which(x==rownames(df_sgl)))))
p1 <- get_heatmap(df_sgl, size=5, gaps_row = gaps)
## write to file
pdf(paste0('hp_',nrow(df_sgl),'_single_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
gaps
df_sgl <- Data_normed_3[readLines('single_TFs.txt'),]
# add gap between cell state groups
last_element_per_group <- aggregate(rownames(annotation_row), by=list(annotation_row$subsets), FUN=tail, n=1) |> pull(x)
gaps <- sort(unlist(lapply(last_element_per_group, function(x) which(x==rownames(df_sgl)))))
p1 <- get_heatmap(df_sgl, size=5, gaps_row = gaps, cluster_rows=F)
## write to file
pdf(paste0('hp_',nrow(df_sgl),'_single_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
gaps
last_element_per_group
df_sgl <- Data_normed_3[readLines('single_TFs.txt'),]
# add gap between cell state groups
annotation_row_single <- annotation_row |> filter(subsets!='multi')
last_element_per_group <- aggregate(rownames(annotation_row_single), by=list(annotation_row_single$subsets), FUN=tail, n=1) |> pull(x)
gaps <- sort(unlist(lapply(last_element_per_group, function(x) which(x==rownames(df_sgl)))))
p1 <- get_heatmap(df_sgl, size=5, gaps_row = gaps, cluster_rows=F, annotation_row = annotation_row_single)
## write to file
pdf(paste0('hp_',nrow(df_sgl),'_single_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- setdiff(candidates, unlist(tfs2))
## import rna-seq data
rna_seq <- read.csv('rna_expr_TFs.csv', row.names = 1)
plot(bubble(tfs2[['TexTerm']],
log2(rna_seq+1)[tfs2[['TexTerm']],rownames(group2)],
Data_normed_3[tfs2[['TexTerm']],rownames(group2)]
))
p1 <- bubble(tfs2[['TexTerm']],
log2(rna_seq+1)[tfs2[['TexTerm']],rownames(group2)],
Data_normed_3[tfs2[['TexTerm']],rownames(group2)]
)
plot(p1)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'))
plot(p1)
dev.off()
tfs2
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'). width = 4, height=8)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 4, height=8)
plot(p1)
dev.off()
candidates
intersect(candidates, tfs2[['TexTerm']])
# reorganize TFs by the p-value significance
t <- intersect(candidates, tfs2[['TexTerm']])
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)])
plot(p1)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 4, height=8)
plot(p1)
dev.off()
View(bubble)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 5)
plot(p1)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 4, height=8)
plot(p1)
dev.off()
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 7)
plot(p1)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=12)
plot(p1)
dev.off()
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=15)
plot(p1)
dev.off()
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TRM']]))
p2 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p2)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TRM']]))
p2 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p2)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TRM']]))
p2 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p2)
candidates
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(tfs2[['TRM']]),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
View(callSpecificTFs)
# load meta file
group_sorted <- read.table('group_file_v2.txt',header = T, row.names = 1)
group_sorted$oldName <- rownames(group_sorted)
rownames(group_sorted) <- group_sorted$newName
## import rna-seq data
rna_seq <- read.csv('rna_expr_TFs.csv', row.names = 1)
n <- which(group_sorted[["Group"]]=="TexTerm")
# identification
tfs <- lapply(unique(group_sorted$Group),
function(x) {
pr <- Data[!(row.names(Data) %in% housekeeping),]
n <- which(group_sorted[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
t <- rownames(x)
t <- t[unlist(lapply(t, function(x) sum(rna_seq[x, n]>0) >= ceiling(0.2*length(n))))]
})
names(tfs) <- unique(group_sorted$Group)
ps <- lapply(names(tfs), function(x) {
annotation_row <- data.frame("subsets"=rep(x,length(tfs[[x]])))
rownames(annotation_row) <- tfs[[x]]
p <-get_heatmap(df=Data_normed_3[rownames(annotation_row),], cluster_rows=F, annotation_row=annotation_row, size = 5)
pdf(paste0('hp_',nrow(annotation_row),'_',x,'_TFs.pdf'))
print(p)
dev.off()
})
getRowAnnotation <- function(TFs){
tmp <- unlist(TFs)
redundants <- unname(tmp[duplicated(tmp)])
uniques <- unname(tmp[!duplicated(tmp)])
tmp2 <- tibble("subsets" = "multi","TFs"=unique(redundants))
annotation_row <- tibble("subsets" = unlist(lapply(1:length(TFs), function(x) {rep(names(TFs[x]), length(TFs[[x]]))})),
"TFs" = unlist(TFs)) %>%
filter(TFs %in% setdiff(uniques, redundants)) %>%
bind_rows(tmp2) %>%
tibble::column_to_rownames("TFs")
return(annotation_row)
}
annotation_row <- getRowAnnotation(tfs)
breaksList = seq(-2, 2, by = 0.1)
annotation_row %>% filter(subsets=="multi") %>% rownames() %>% writeLines('multi_TFs.txt')
annotation_row %>% filter(subsets!="multi") %>% rownames() %>% writeLines('single_TFs.txt')
df_multi <- Data_normed_3[readLines('multi_TFs.txt'),]
p1 <- get_heatmap(df_multi, size=5)
## write to file
pdf(paste0('hp_',nrow(df_multi),'_multi_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
df_sgl <- Data_normed_3[readLines('single_TFs.txt'),]
# add gap between cell state groups
annotation_row_single <- annotation_row |> filter(subsets!='multi')
last_element_per_group <- aggregate(rownames(annotation_row_single), by=list(annotation_row_single$subsets), FUN=tail, n=1) |> pull(x)
gaps <- sort(unlist(lapply(last_element_per_group, function(x) which(x==rownames(df_sgl)))))
p1 <- get_heatmap(df_sgl, size=5, gaps_row = gaps, cluster_rows=F, annotation_row = annotation_row_single)
## write to file
pdf(paste0('hp_',nrow(df_sgl),'_single_TFs.pdf'), width = 8, height=12)
print(p1)
dev.off()
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- setdiff(candidates, unlist(tfs2))
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TexTerm']]))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tfs2[['TRM']]))
p2 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p2)
common_tfs
intersect(candidates,common_tfs)
p3 <- bubble(common_tfs,
log2(rna_seq+1)[common_tfs,rownames(group2)],
Data_normed_3[common_tfs,rownames(group2)]
)
plot(p3)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(tfs2[['TRM']]),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
pdf(paste0('bb_',length(common_tfs),'_common_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(tfs2[['TRM']]),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
pdf(paste0('bb_',length(common_tfs),'_common_TFs.pdf'), width = 4.5, height=6)
plot(p3)
dev.off()
View(tfs2)
View(tfs2)
t <- rev(intersect(candidates, common_tfs))
p3 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)]. text.size = 8)
t <- rev(intersect(candidates, common_tfs))
p3 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p3)
t <- rev(intersect(candidates, common_tfs))
p3 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p3)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.045,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- setdiff(candidates, unlist(tfs2))
View(tfs2)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.048,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- setdiff(candidates, unlist(tfs2))
View(tfs2)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.55)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- setdiff(candidates, unlist(tfs2))
View(tfs2)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.55)
x
# rownames(x)
})
# names(tfs2) <- unique(group2$Group)
# common_tfs <- setdiff(candidates, unlist(tfs2))
View(tfs2)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.06,d=0.4)
x
# rownames(x)
})
# names(tfs2) <- unique(group2$Group)
# common_tfs <- setdiff(candidates, unlist(tfs2))
tfs2[[2]]
intersect(tfs[['TexTerm']], tfs[['TRM']])
t1 =intersect(tfs[['TexTerm']], tfs[['TRM']])
length(t1)
intersect(common_tfs,t1)
intersect(common_tfs,t1) |> length()
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
multi_state_tfs <- intersect(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.06,d=0.4)
x
# rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- union(setdiff(candidates, unlist(tfs2)),multi_state_tfs)
tex_tfs <- intersect(tfs2[['TexTerm']], common_tfs)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
multi_state_tfs <- intersect(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.06,d=0.4)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- union(setdiff(candidates, unlist(tfs2)),multi_state_tfs)
tex_tfs <- intersect(tfs2[['TexTerm']], common_tfs)
trm_tfs <- intersect(tfs2[['TRM']], common_tfs)
View(tfs2)
setdiff(candidates, unlist(tfs2))
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
multi_state_tfs <- intersect(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- union(setdiff(candidates, unlist(tfs2)),multi_state_tfs)
tex_tfs <- intersect(tfs2[['TexTerm']], common_tfs)
trm_tfs <- intersect(tfs2[['TRM']], common_tfs)
# manually select background samples
group2 <- group_sorted[grepl("TRM|TexTerm",group_sorted$Group),]
candidates <- union(tfs[['TexTerm']], tfs[['TRM']])
multi_state_tfs <- intersect(tfs[['TexTerm']], tfs[['TRM']])
tfs2 <- lapply(unique(group2$Group),
function(x) {
pr <- Data[candidates,rownames(group2)]
n <- which(group2[["Group"]]==x)
x <- unpairedtTest(pr,n,p=0.05,d=0.5)
rownames(x)
})
names(tfs2) <- unique(group2$Group)
common_tfs <- union(setdiff(candidates, unlist(tfs2)),multi_state_tfs)
tex_tfs <- setdiff(tfs2[['TexTerm']], common_tfs)
trm_tfs <- setdiff(tfs2[['TRM']], common_tfs)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, tex_tfs))
p1 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p1)
# reorganize TFs by the p-value significance
t <- rev(intersect(candidates, trm_tfs))
p2 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p2)
t <- rev(intersect(candidates, common_tfs))
p3 <- bubble(t,log2(rna_seq+1)[t,rownames(group2)],Data_normed_3[t,rownames(group2)], text.size = 8)
plot(p3)
## save to file
pdf(paste0('bb_',length(tfs2[['TexTerm']]),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(tfs2[['TRM']]),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
pdf(paste0('bb_',length(common_tfs),'_common_TFs.pdf'), width = 4.5, height=6)
plot(p3)
dev.off()
## save to file
pdf(paste0('bb_',length(tex_tfs),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(trm_tfs),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
pdf(paste0('bb_',length(common_tfs),'_common_TFs.pdf'), width = 4.5, height=6)
plot(p3)
dev.off()
## save to file
pdf(paste0('bb_',length(tex_tfs),'_TEX_TFs.pdf'), width = 5, height=8)
plot(p1)
dev.off()
pdf(paste0('bb_',length(trm_tfs),'_TRM_TFs.pdf'), width = 4.5, height=6)
plot(p2)
dev.off()
pdf(paste0('bb_',length(common_tfs),'_common_TFs.pdf'), width = 4.5, height=8)
plot(p3)
dev.off()
